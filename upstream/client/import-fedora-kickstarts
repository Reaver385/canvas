#!/usr/bin/python3
#
# Import all Fedora kickstarts prefixed with 'fedora-live'.
#
# All includes will be preprocessed and also included as part
# of the import procedure.
#

import os
import re
import subprocess
import sys
import tempfile

KS_FILES = {}

def get_includes(ks_path, ks_file):
    global KS_FILES

    if ks_file in KS_FILES:
        return

    path = os.path.join(ks_path, ks_file)

    print("Collecting includes for: {0}".format(ks_file))

    includes = []

    with open(path, 'r') as f:
        for line in f:
            l = line.rstrip('\n')
            if l.startswith('%include'):
                params = re.split(' ', l)
                includes.append(params[1])

    KS_FILES[ks_file] = includes

    for i in includes:
        get_includes(ks_path, i)

def map_canvas_name(ks_file, version=None):

    name = ks_file[:-3]

    if name == 'fedora-live-workstation':
        name = 'fedora-live-gnome'

    if version is not None:
        return "kororaproject:{0}@{1}".format(name, version)

    return "kororaproject:{0}".format(name)

def run_canvas(args):
    args.insert(0, 'canvas')
    cmd = ' '.join(args)
    print(cmd)
    return subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=30)


if __name__ == "__main__":
    if len(sys.argv) != 2 or not os.path.exists(sys.argv[1]):
        print("Must enter path to fedora kickstart directory.")
        exit(1)

    version = None

    print("Testing canvas connection ...")
    proc = run_canvas(['template', 'list'])
    if proc.returncode != 0:
        print(proc.stdout)
        print(proc.stderr)
        exit(1)

    ks_path = sys.argv[1]
    if len(sys.argv) > 2:
        version = int(sys.argv[2])

    ks_files = [f for f in os.listdir(ks_path) if f.startswith('fedora-live') and os.path.isfile(os.path.join(ks_path, f))]

    # pre-process and map all necessary includes
    for k in ks_files:
        get_includes(ks_path, k)

    print()

    # import each kickstart
    for ks, includes in sorted(KS_FILES.items()):
        print("Processing: {0}".format(ks))

        k_mapped = map_canvas_name(ks, version)
        i_mapped = [map_canvas_name(i, version) for i in includes]

        i_args = ''
        if len(i_mapped):
            i_args = " --includes '{0}'".format(','.join(i_mapped))

        # update includes (also checks existence)
        proc = run_canvas(['template', 'dump', k_mapped, '--no-resolve-includes'])
        if proc.returncode != 0:
            print(proc)

            print("Adding new template: {0}".format(k_mapped))
            proc = run_canvas(['template', 'add', k_mapped, '--name', ks, i_args, '--public', 'true'])
            if proc.returncode != 0:
                print(proc)
                exit(1)

        path = os.path.join(ks_path, ks)

        # build filtered kickstart
        ks_path_tmp = '/tmp/canvas-fedora-import.ks'
        fp = open(ks_path_tmp, 'w')

        with open(path, 'r') as f:
            for l in f:
                if not l.startswith('%include'):
                    fp.write(l)
        fp.close()

        # push filtered (includes) kickstart
        proc = run_canvas(['template', 'push', k_mapped, '--clean', '--kickstart', fp.name])
        if proc.returncode != 0:
            print(proc)
            exit(1)

        os.unlink(ks_path_tmp)

        # update includes (also checks existence)
        proc = run_canvas(['template', 'update', k_mapped, i_args])
        if proc.returncode != 0:
            print(proc)

        print()
